type: edu
custom_name: stage2
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                if len(line) != 9:
                    raise WrongAnswerException(
                        f"Line of Tic-Tac-Toe field should be 9 characters long\n"
                        f"found {len(line)} characters in \"{line}\"")
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                tests += [
                    TestCase(
                        stdin=full_game_input,
                        attach=(x, y)
                    )
                ]

                i += 1

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            clue_x, clue_y = attach

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            if "Making move level \"easy\"" not in reply:
                return CheckResult.wrong(
                    "No \"Making move level \"easy\"\" line in output"
                )

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: |
    from typing import List


    class TicTacToe:
        def __init__(self, string_desk: str = '_________'):
            self.string_field = string_desk
            self.nested_list_field = self._convert_field_to_nested_list()
            self._x = None
            self._y = None
            self.X = self._count_element('X')
            self.O = self._count_element('O')

        def _convert_field_to_nested_list(self) -> List[List]:
            """Replaces underscores to spaces and convert field to nested list"""
            cleaned_field = self.string_field.replace('_', ' ')
            nested_list = []
            index = 0
            for i in range(3):
                list_ = []
                for j in range(3):
                    list_.append(cleaned_field[index])
                    index += 1
                nested_list.append(list_)
            return nested_list

        def show_desk(self):
            """Prints game desk to console"""
            print('---------')
            for row in self.nested_list_field:
                print('|', end=' ')
                for element in row:
                    print(element, end=' ')
                print('|', end='\n')
            print('---------')

        def validate_coordinates(self, coordinates: List[str]) -> bool:
            """Input validation"""
            try:
                x = int(coordinates[0])
                y = int(coordinates[1])
            except (ValueError, IndexError):
                print("You should enter numbers!")
                return False

            if not (1 <= x <= 3 and 1 <= y <= 3):
                print("Coordinates should be from 1 to 3!")
                return False

            if self._is_empty_space(x, y):
                return True
            else:
                print('This cell is occupied! Choose another one!')
                return False

        def _is_empty_space(self, x: int, y: int) -> bool:
            """Checks if selected cell is empty"""
            self._convert_coordinate(x, y)
            if self.nested_list_field[self._x][self._y] == ' ':
                return True
            return False

        def _convert_coordinate(self, x, y):
            """Convert enumeration to default in python, from left top to right bottom"""
            if x == 1 and y == 3:
                self._x, self._y = 0, 0
            elif x == 2 and y == 3:
                self._x, self._y = 0, 1
            elif x == 3 and y == 3:
                self._x, self._y = 0, 2
            elif x == 1 and y == 2:
                self._x, self._y = 1, 0
            elif x == 2 and y == 2:
                self._x, self._y = 1, 1
            elif x == 3 and y == 2:
                self._x, self._y = 1, 2
            elif x == 1 and y == 1:
                self._x, self._y = 2, 0
            elif x == 2 and y == 1:
                self._x, self._y = 2, 1
            elif x == 3 and y == 1:
                self._x, self._y = 2, 2

        def _count_element(self, element: str) -> int:
            """Counts 'X' or 'O' or ' ' elements on desk"""
            count = 0
            for row in self.nested_list_field:
                for el in row:
                    if el == element:
                        count += 1
            return count

        def make_step(self):
            """Make step"""
            if self.O < self.X:
                self.nested_list_field[self._x][self._y] = 'O'
                self.O = self._count_element('O')
            else:
                self.nested_list_field[self._x][self._y] = 'X'
                self.X = self._count_element('X')

        def check_winner(self):
            """Check who wins"""
            if self._win_condition('O'):
                print('O wins')
            elif self._win_condition('X'):
                print('X wins')
            elif self._count_element(' '):
                print("Game not finished")
            elif not self._count_element(' '):
                print('Draw')

        def _win_condition(self, elem: str):
            """Check wins conditions"""
            win_conditions = any([
                elem == self.nested_list_field[0][0] == self.nested_list_field[0][1] == self.nested_list_field[0][2],
                elem == self.nested_list_field[1][0] == self.nested_list_field[1][1] == self.nested_list_field[1][2],
                elem == self.nested_list_field[2][0] == self.nested_list_field[2][1] == self.nested_list_field[2][2],
                elem == self.nested_list_field[0][0] == self.nested_list_field[1][0] == self.nested_list_field[2][0],
                elem == self.nested_list_field[0][1] == self.nested_list_field[1][1] == self.nested_list_field[2][1],
                elem == self.nested_list_field[0][2] == self.nested_list_field[1][2] == self.nested_list_field[2][2],
                elem == self.nested_list_field[0][0] == self.nested_list_field[1][1] == self.nested_list_field[2][2],
                elem == self.nested_list_field[0][2] == self.nested_list_field[1][1] == self.nested_list_field[2][0],
            ])

            if win_conditions:
                return True
            return False


    if __name__ == '__main__':
        desk = input('Enter cells: ')
        game = TicTacToe(desk)
        game.show_desk()
        while True:
            coordinates = input('Enter the coordinates: ').split()
            if game.validate_coordinates(coordinates):
                break
        game.make_step()
        game.show_desk()
        game.check_winner()
  learner_created: true
feedback_link: https://hyperskill.org/projects/82/stages/453/implement
status: Solved
record: -1
